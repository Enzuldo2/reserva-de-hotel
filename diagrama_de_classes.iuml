@startuml
title Diagrama de Classes Reserva de Hotel

abstract class Person {
    +personId: int 
    +name : str
    +birthday: Date
    +phone: str
}


class Client extends DefaultUser {
    +clientId: int
    +members: list<Member>
    +state : Reservation
    add_member(): bool
}

abstract class DefaultUser extends Person {
    +username: str
    +password: str
    +isSuperUser: bool 
    +isActive: bool 
}

class Admin <<Singleton>> extends DefaultUser {

    +createUser(DefaultUser user): bool
    +getInstance(): Admin
    +getUser(): User
    +updateUser(): bool
    +deleteUser(): bool
    +getUsers(): list<User>
    +makeReservation(): bool
    +cancelReservation(): bool
    getReservations(): list<Reservation>
    +createRoom(): bool
}


class Member extends Person {
}


class Hotel <<Singleton>> {
    +name: str
    +address: Address
    +isFull: bool
    +clients: list<Client>
    +admins: list<Admin>
    +rooms: list<DefaultRoom>
    +services: list<Service>
    +reservations: list<Reservation>
}

class Address {
    +country: str
    +state: str
    +city: str
    +postalCode: str
    +street: str
    +number: int
}

interface Room {
    +createRoom(): int
    +getRoom(): Room
    +updateRoom(): bool
    +deleteRoom(): bool
    +getRooms(): list<Room>
    +getAvailableRoom(): list<Room>
    +getPrice(): float
    +area(): float
    +volume(): float
}

abstract class DefaultRoom implements Room {
    +roomId: int
    +isActive: bool
    +isReserved: bool
    +width: float
    +length: float
    +height: float
    +capacity: int
    +price: float
    +description: str
}


class SingleRoom extends DefaultRoom {
}

class SuiteRoom extends DefaultRoom {
}

class FamilyRoom extends DefaultRoom {
}

interface Service {
    +createService(): int
    +getService(): Service
    +updateService(): bool
    +deleteService(): bool
    +getServices(): list<Service>
    +getAvailableService(): list<Service>
}

class DefaultService implements Service {
    +name: str
    +capacity: int 
    +description: str

}

interface Reservation <<State>> {
    +createReservation(): bool
    +getReservation(): Reservation
    +updateReservation(int id, String date, String time, String room, String user): Reservation
    +utilTime(): Date
}

class Reserved <<Singleton>> implements Reservation {
    +reserveId: int
    +clientId: int
    +roomId: int
    +checkIn: Date
    +checkOut: Date
}

class Canceled <<Singleton>> implements Reservation {
    +reserveId: int
    +clientId: int
    +roomId: int
    +checkIn: Date
    +checkOut: Date
}



Hotel "1" o-- "1"     Address: have
Hotel "1" *-- "1..*"  Admin: have
Hotel "1" *-- "0..*"  Client: have
Hotel "1" o-- "0..*"  DefaultRoom: have
Hotel "1" o-- "0..*"  DefaultService: have
Hotel "1" o-- "0..*"  DefaultReservation: have

Admin "1" --- "0..*"  Service: manages
Admin "1" --- "0..*"  Room: manages
Admin "1" --- "0..*"  Reservation: manages
Admin "1" --- "1"     Hotel: manages


Client "1" *-- "0..*" Member: have
@enduml
